using Interest.Commands;
using Interest.Options;
using Interest.Types;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Interest.ViewModels
{
    public class InterestPlanViewModel : ViewModelBase
    {
        internal InterestPlanViewModelOption Options { get; }

        public InterestPlanViewModel(InterestPlanViewModelOption options)
        {
            Options = options ?? throw new ArgumentNullException(nameof(options));
            Payments = new ObservableCollection<PaymentViewModel>();

            CalculateCommand = new DelegateCommand(() =>
            {
                if (!_isPlanUpdating)
                {
                    _isPlanUpdating = true;
                    var newCalculation = Calculate(Payments);
                    foreach (var oldItem in Payments)
                    {
                        oldItem.PropertyChanged -= PaymentViewModel_PropertyChanged;
                    }
                    Payments.Clear();
                    foreach (var newCalculationItem in newCalculation)
                    {
                        Payments.Add(newCalculationItem);
                        newCalculationItem.PropertyChanged += PaymentViewModel_PropertyChanged;
                    }
                    RaisePropertyChanged(nameof(TotalInterest));
                    RaisePropertyChanged(nameof(ResidualDebt));
                    RaisePropertyChanged(nameof(RedemptionRate));
                    _isPlanUpdating = false;
                }
            });
            ResetCommand = new DelegateCommand(() => ResetAllInputValues());

            CalculateCommand.Execute();
        }

        private void PaymentViewModel_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            // whenever an item is modified inside we want the complete plan to be recalculated
            CalculateCommand.Execute();
        }

        private void ResetAllInputValues()
        {
            _isPlanUpdating = true;
            foreach (var p in Payments)
            {
                // we mark all items as autogenerated to remove user overrides.
                // This will lead the calculation to ignore the user values and to use the calculated ones.
                p.Payment = new Currency(p.Payment);
                p.UnscheduledRepayment = new Currency(p.UnscheduledRepayment);
            }
            _isPlanUpdating = false;
            CalculateCommand.Execute();
        }

        public DelegateCommand CalculateCommand { get; private set; }
        public DelegateCommand ResetCommand { get; }

        public ObservableCollection<PaymentViewModel> Payments { get; }

        public double ResidualDebt
        {
            get
            {
                var ret = LoanAmount.Value;
                if (Payments.Any())
                {
                    ret = Payments.Last().ResidualDebt.Value;
                }
                return ret;
            }
        }

        public double TotalInterest
        {
            get
            {
                var i = 0.0;
                if (Payments != null)
                {
                    foreach (var p in Payments)
                    {
                        i += p.Interest.Value;
                    }
                }
                return i;
            }
        }

        public IEnumerable<PaymentViewModel> Calculate(IEnumerable<PaymentViewModel> previousPayments)
        {
            return Calculator.GetPaymentPlan(previousPayments: previousPayments,
                startMonth: StartMonth,
                years: Years,
                loan: LoanAmount,
                borrowing: Borrowing,
                redemption: RedemptionRate,
                redemptionFreeMonths: RedemptionFreeMonths,
                isApplyAllUnscheduledRepayments: IsApplyAllUnscheduledRepayments,
                unscheduledRepaymentPercentage: UnscheduledRepayment,
                isFullRepayment: IsFullRepayment);
        }

        public Currency RedemptionAmount
        {
            get { return Calculator.GetRedemptionAmount(LoanAmount, Borrowing, RedemptionRate); }
            set { RedemptionRate = Calculator.GetRedemptionPercentage(LoanAmount, Borrowing, value); }
        }

        #region Redemption
        public Percentage RedemptionRate
        {
            get
            {
                return IsFullRepayment ?
                  Payments.Last().Borrowing :
                  new Percentage(Options.RedemptionPercentage);
            }
            set
            {
                if (SetProperty(ref Options._redemptionPercentage, value.PerYear))
                {
                    CalculateCommand.Execute();
                    RaisePropertyChanged(nameof(RedemptionAmount));
                }
            }
        }
        #endregion RedemptionPercentage


        #region StartMonth

        public DateTime StartMonth
        {
            get { return Options.StartMonth; }
            set
            {
                if (SetProperty(ref Options._startMonth, value))
                {
                    CalculateCommand.Execute();
                }
            }
        }

        #endregion StartMonth

        #region RedemptionFreeMonths

        public int RedemptionFreeMonths
        {
            get { return Options.RedemptionFreeMonths; }
            set
            {
                if (SetProperty(ref Options._redemptionFreeMonths, value))
                {
                    CalculateCommand.Execute();
                }
            }
        }

        #endregion RedemptionFreeMonths

        #region UnscheduledRepayment

        public Percentage UnscheduledRepayment
        {
            get { return new Percentage(Options.UnscheduledRepaymentPercentage); }
            set
            {
                if (SetProperty(ref Options._unscheduledRepaymentPercentage, value.PerYear))
                {
                    CalculateCommand.Execute();
                }
            }
        }

        #endregion UnscheduledRepayment

        #region IsApplyAllUnscheduledRepayments

        private bool _isApplyAllUnscheduledRepayments;

        public bool IsApplyAllUnscheduledRepayments
        {
            get { return _isApplyAllUnscheduledRepayments; }
            set
            {
                if (SetProperty(ref _isApplyAllUnscheduledRepayments, value))
                {
                    CalculateCommand.Execute();
                }
            }
        }

        #endregion IsApplyAllUnscheduledRepayments

        #region Years

        public int Years
        {
            get { return Options.Years; }
            set
            {
                if (SetProperty(ref Options._years, value))
                {
                    CalculateCommand.Execute();
                }
            }
        }

        #endregion Years

        #region Borrowing
        public Percentage Borrowing
        {
            get
            {
                return new Percentage(Options.BorrowingPercentage);
            }
            set
            {
                if (SetProperty(ref Options._borrowingPercentage, value.PerYear))
                {
                    CalculateCommand.Execute();
                    RaisePropertyChanged(nameof(RedemptionAmount));
                }
            }
        }
        #endregion

        #region LoanAmount
        public Currency LoanAmount
        {
            get { return new Currency(Options.LoanAmount); }
            set
            {
                if (SetProperty(ref Options._loanAmount, value.Value))
                {
                    CalculateCommand.Execute();
                    RaisePropertyChanged(nameof(RedemptionAmount));
                }
            }
        }
        #endregion LoanAmount

        #region Lender
        public string Lender
        {
            get => Options.Lender;
            set => _ = SetProperty(ref Options._lender, value);
        }
        #endregion Lender

        public override string ToString()
        {
            return Options.ToString();
        }

        private bool _isPlanUpdating;

        #region IsFullRepayment
        private bool _isFullRepayment;

        public bool IsFullRepayment
        {
            get => _isFullRepayment;
            set
            {
                if (SetProperty(ref _isFullRepayment, value))
                {
                    CalculateCommand.Execute();
                    RaisePropertyChanged(nameof(Borrowing));
                }
            }
        }
        #endregion IsFullRepayment
    }
}